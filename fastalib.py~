#!/usr/local/bin/python3.5

# Makes a library of fasta files

import os
import argparse
import subprocess

"""
The join() call prepends the current working directory, but the documentation says that if some path is absolute, all other paths left of it are dropped. Therefore, getcwd() is dropped when dirname(__file__) returns an absolute path.

Also, the realpath call resolves symbolic links if any are found. This avoids troubles when deploying with setuptools on Linux systems (scripts are symlinked to /usr/bin/ -- at least on Debian).

You may the use the following to open up files in the same folder:

f = open(os.path.join(__location__, 'bundled-resource.jpg'));
"""

__location__ = os.path.realpath(
        os.path.join(os.getcwd(), os.path.dirname(__file__)))

parser = argparse.ArgumentParser(description = 'Some FASTA file functionalities')

parser.add_argument('infile', metavar = 'InFile')         #input file  
parser.add_argument('-db', '--makedb', metavar = 'DBTYPE')
parser.add_argument('-b', metavar = 'BLAST')              #runs blast
parser.add_argument('-a', '--append', metavar = 'APPEND') #updates an outfile
parser.add_argument('outfile', metavar = 'OutFile', \
                     nargs = '?', default = 'output.txt') #output file             

args = parser.parse_args()

def addFile(aFile):
    with open(args.outfile, 'a') as f:
        with open(aFile, 'r') as g:
                for line in g:
                    f.write(line)
    print(args.outfile + ' has been updated.')

if args.a:
    addFile(args.infile)
elif args.db:
    mkdb()

def mkdb():
    subprocess.call(['makeblastdb', '-in', args.infile, 'parse_seqids', '-dbtype', args.db])



with open(args.infile, 'r') as f:
    for line in f:
        if line[0] == '>':
            print(line.rstrip('\n'))

#parser.set_defaults(func=listfiles)

#def run_blast():
#    subprocess.call(['blastn', '-query', args.infile, '

#if args.infile:
#    listfiles()
#if args.outfile:
#    addFile(args.infile)

if __name__ == '__main__':
    args = parser.parse_args()
#    args.func(args)
